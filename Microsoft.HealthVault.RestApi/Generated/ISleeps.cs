// Code generated by Microsoft (R) AutoRest Code Generator 1.2.2.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.HealthVault.RestApi.Generated
{
    using Microsoft.HealthVault;
    using Microsoft.HealthVault.RestApi;
    using Microsoft.Rest;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Sleeps operations.
    /// </summary>
    public partial interface ISleeps
    {
        /// <summary>
        /// Get the Sleep Activity data for this user by date range
        /// </summary>
        /// <param name='startTime'>
        /// The ISO 8601 formatted start time of the Sleep activities,
        /// inclusive.
        /// </param>
        /// <param name='endTime'>
        /// The ISO 8601 formatted end time of the Sleep activities, exclusive.
        /// Defaults to the current time in UTC.
        /// </param>
        /// <param name='includeDetails'>
        /// comma separated string to additional details. Available values
        /// Basic, Full. Default - Basic
        /// </param>
        /// <param name='maxPageSize'>
        /// The maximum number of entries to return per page.  Defaults to 31
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorResponseException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<SleepResponse>> GetWithHttpMessagesAsync(System.DateTime? startTime = default(System.DateTime?), System.DateTime? endTime = default(System.DateTime?), string includeDetails = default(string), int? maxPageSize = default(int?), Dictionary<string, List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    }
}
