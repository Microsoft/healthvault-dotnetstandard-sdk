// Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace HealthVault.Client
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for MicrosoftHealthVaultRestApi.
    /// </summary>
    public static partial class MicrosoftHealthVaultRestApiExtensions
    {
            /// <summary>
            /// Get a collection of action plans
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='maxPageSize'>
            /// The maximum number of entries to return per page. Defaults to 1000.
            /// </param>
            public static ActionPlansResponseActionPlanInstance GetActionPlans(this IMicrosoftHealthVaultRestApi operations, int? maxPageSize = default(int?))
            {
                return operations.GetActionPlansAsync(maxPageSize).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a collection of action plans
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='maxPageSize'>
            /// The maximum number of entries to return per page. Defaults to 1000.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ActionPlansResponseActionPlanInstance> GetActionPlansAsync(this IMicrosoftHealthVaultRestApi operations, int? maxPageSize = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetActionPlansWithHttpMessagesAsync(maxPageSize, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update/Replace a complete action plan instance with no merge.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='actionPlan'>
            /// The instance of the plan to update. The entire plan will be replaced with
            /// this version.
            /// </param>
            public static ActionPlansResponseActionPlanInstance PutActionPlan(this IMicrosoftHealthVaultRestApi operations, ActionPlanInstance actionPlan)
            {
                return operations.PutActionPlanAsync(actionPlan).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update/Replace a complete action plan instance with no merge.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='actionPlan'>
            /// The instance of the plan to update. The entire plan will be replaced with
            /// this version.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ActionPlansResponseActionPlanInstance> PutActionPlanAsync(this IMicrosoftHealthVaultRestApi operations, ActionPlanInstance actionPlan, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PutActionPlanWithHttpMessagesAsync(actionPlan, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Post an action plan instance
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='actionPlan'>
            /// The instance of the plan to create.
            /// </param>
            public static object CreateActionPlan(this IMicrosoftHealthVaultRestApi operations, ActionPlan actionPlan)
            {
                return operations.CreateActionPlanAsync(actionPlan).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Post an action plan instance
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='actionPlan'>
            /// The instance of the plan to create.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateActionPlanAsync(this IMicrosoftHealthVaultRestApi operations, ActionPlan actionPlan, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateActionPlanWithHttpMessagesAsync(actionPlan, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update an action plan instance with merge
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='actionPlan'>
            /// The instance of the plan to update. Only the fields present in the passed
            /// in model will be updated. All other fields and colelctions
            /// will be left, as is, unless invalid.
            /// </param>
            public static ActionPlansResponseActionPlanInstance PatchActionPlan(this IMicrosoftHealthVaultRestApi operations, ActionPlanInstance actionPlan)
            {
                return operations.PatchActionPlanAsync(actionPlan).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update an action plan instance with merge
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='actionPlan'>
            /// The instance of the plan to update. Only the fields present in the passed
            /// in model will be updated. All other fields and colelctions
            /// will be left, as is, unless invalid.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ActionPlansResponseActionPlanInstance> PatchActionPlanAsync(this IMicrosoftHealthVaultRestApi operations, ActionPlanInstance actionPlan, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchActionPlanWithHttpMessagesAsync(actionPlan, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get an instance of a specific action plan
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='actionPlanId'>
            /// The action plan to update.
            /// </param>
            public static ActionPlanInstance GetActionPlanById(this IMicrosoftHealthVaultRestApi operations, string actionPlanId)
            {
                return operations.GetActionPlanByIdAsync(actionPlanId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get an instance of a specific action plan
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='actionPlanId'>
            /// The action plan to update.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ActionPlanInstance> GetActionPlanByIdAsync(this IMicrosoftHealthVaultRestApi operations, string actionPlanId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetActionPlanByIdWithHttpMessagesAsync(actionPlanId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete an action plan instance
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='actionPlanId'>
            /// The instance of the plan to delete.
            /// </param>
            public static object DeleteActionPlan(this IMicrosoftHealthVaultRestApi operations, string actionPlanId)
            {
                return operations.DeleteActionPlanAsync(actionPlanId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete an action plan instance
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='actionPlanId'>
            /// The instance of the plan to delete.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteActionPlanAsync(this IMicrosoftHealthVaultRestApi operations, string actionPlanId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteActionPlanWithHttpMessagesAsync(actionPlanId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Remove an action plan objective
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='actionPlanId'>
            /// The instance of the plan that the objective belongs to.
            /// </param>
            /// <param name='objectiveId'>
            /// The instance of the objective to delete.
            /// </param>
            public static object DeleteActionPlanObjective(this IMicrosoftHealthVaultRestApi operations, string actionPlanId, string objectiveId)
            {
                return operations.DeleteActionPlanObjectiveAsync(actionPlanId, objectiveId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Remove an action plan objective
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='actionPlanId'>
            /// The instance of the plan that the objective belongs to.
            /// </param>
            /// <param name='objectiveId'>
            /// The instance of the objective to delete.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteActionPlanObjectiveAsync(this IMicrosoftHealthVaultRestApi operations, string actionPlanId, string objectiveId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteActionPlanObjectiveWithHttpMessagesAsync(actionPlanId, objectiveId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets adherence information for an action plan.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='startTime'>
            /// The start time.
            /// </param>
            /// <param name='endTime'>
            /// The end time.
            /// </param>
            /// <param name='actionPlanId'>
            /// The action plan identifier.
            /// </param>
            /// <param name='objectiveId'>
            /// The objective to filter the report to.
            /// </param>
            /// <param name='taskId'>
            /// The task to filter the report to.
            /// </param>
            public static ActionPlanAdherenceSummary GetActionPlanAdherence(this IMicrosoftHealthVaultRestApi operations, System.DateTime startTime, System.DateTime endTime, string actionPlanId, string objectiveId = default(string), string taskId = default(string))
            {
                return operations.GetActionPlanAdherenceAsync(startTime, endTime, actionPlanId, objectiveId, taskId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets adherence information for an action plan.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='startTime'>
            /// The start time.
            /// </param>
            /// <param name='endTime'>
            /// The end time.
            /// </param>
            /// <param name='actionPlanId'>
            /// The action plan identifier.
            /// </param>
            /// <param name='objectiveId'>
            /// The objective to filter the report to.
            /// </param>
            /// <param name='taskId'>
            /// The task to filter the report to.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ActionPlanAdherenceSummary> GetActionPlanAdherenceAsync(this IMicrosoftHealthVaultRestApi operations, System.DateTime startTime, System.DateTime endTime, string actionPlanId, string objectiveId = default(string), string taskId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetActionPlanAdherenceWithHttpMessagesAsync(startTime, endTime, actionPlanId, objectiveId, taskId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a collection of task definitions
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='actionPlanTaskStatus'>
            /// Possible values include: 'Unknown', 'Archived', 'InProgress',
            /// 'Recommended', 'Completed', 'Template'
            /// </param>
            /// <param name='maxPageSize'>
            /// The maximum number of entries to return per page. Defaults to 1000.
            /// </param>
            public static ActionPlanTasksResponseActionPlanTaskInstance GetActionPlanTasks(this IMicrosoftHealthVaultRestApi operations, string actionPlanTaskStatus = default(string), int? maxPageSize = default(int?))
            {
                return operations.GetActionPlanTasksAsync(actionPlanTaskStatus, maxPageSize).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a collection of task definitions
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='actionPlanTaskStatus'>
            /// Possible values include: 'Unknown', 'Archived', 'InProgress',
            /// 'Recommended', 'Completed', 'Template'
            /// </param>
            /// <param name='maxPageSize'>
            /// The maximum number of entries to return per page. Defaults to 1000.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ActionPlanTasksResponseActionPlanTaskInstance> GetActionPlanTasksAsync(this IMicrosoftHealthVaultRestApi operations, string actionPlanTaskStatus = default(string), int? maxPageSize = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetActionPlanTasksWithHttpMessagesAsync(actionPlanTaskStatus, maxPageSize, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Put an update for an action plan task
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='actionPlanTask'>
            /// </param>
            public static ActionPlanTasksResponseActionPlanTaskInstance PutActionPlanTasks(this IMicrosoftHealthVaultRestApi operations, ActionPlanTaskInstance actionPlanTask)
            {
                return operations.PutActionPlanTasksAsync(actionPlanTask).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Put an update for an action plan task
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='actionPlanTask'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ActionPlanTasksResponseActionPlanTaskInstance> PutActionPlanTasksAsync(this IMicrosoftHealthVaultRestApi operations, ActionPlanTaskInstance actionPlanTask, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PutActionPlanTasksWithHttpMessagesAsync(actionPlanTask, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Post a new action plan task
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='actionPlanTask'>
            /// </param>
            public static object PostActionPlanTasks(this IMicrosoftHealthVaultRestApi operations, ActionPlanTask actionPlanTask)
            {
                return operations.PostActionPlanTasksAsync(actionPlanTask).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Post a new action plan task
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='actionPlanTask'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PostActionPlanTasksAsync(this IMicrosoftHealthVaultRestApi operations, ActionPlanTask actionPlanTask, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostActionPlanTasksWithHttpMessagesAsync(actionPlanTask, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Patch an update for an action plan task
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='actionPlanTask'>
            /// </param>
            public static ActionPlanTasksResponseActionPlanTaskInstance PatchActionPlanTasks(this IMicrosoftHealthVaultRestApi operations, ActionPlanTaskInstance actionPlanTask)
            {
                return operations.PatchActionPlanTasksAsync(actionPlanTask).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Patch an update for an action plan task
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='actionPlanTask'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ActionPlanTasksResponseActionPlanTaskInstance> PatchActionPlanTasksAsync(this IMicrosoftHealthVaultRestApi operations, ActionPlanTaskInstance actionPlanTask, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchActionPlanTasksWithHttpMessagesAsync(actionPlanTask, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a task by id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='actionPlanTaskId'>
            /// </param>
            public static ActionPlanTasksResponseActionPlanTaskInstance GetActionPlanTasksById(this IMicrosoftHealthVaultRestApi operations, string actionPlanTaskId)
            {
                return operations.GetActionPlanTasksByIdAsync(actionPlanTaskId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a task by id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='actionPlanTaskId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ActionPlanTasksResponseActionPlanTaskInstance> GetActionPlanTasksByIdAsync(this IMicrosoftHealthVaultRestApi operations, string actionPlanTaskId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetActionPlanTasksByIdWithHttpMessagesAsync(actionPlanTaskId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a task by id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='actionPlanTaskId'>
            /// </param>
            public static object DeleteActionPlanTasksById(this IMicrosoftHealthVaultRestApi operations, string actionPlanTaskId)
            {
                return operations.DeleteActionPlanTasksByIdAsync(actionPlanTaskId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a task by id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='actionPlanTaskId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteActionPlanTasksByIdAsync(this IMicrosoftHealthVaultRestApi operations, string actionPlanTaskId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteActionPlanTasksByIdWithHttpMessagesAsync(actionPlanTaskId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='trackingValidation'>
            /// </param>
            public static ActionPlanTaskTrackingResponseActionPlanTaskTracking ValidateActionPlanTasksTracking(this IMicrosoftHealthVaultRestApi operations, TrackingValidation trackingValidation)
            {
                return operations.ValidateActionPlanTasksTrackingAsync(trackingValidation).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='trackingValidation'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ActionPlanTaskTrackingResponseActionPlanTaskTracking> ValidateActionPlanTasksTrackingAsync(this IMicrosoftHealthVaultRestApi operations, TrackingValidation trackingValidation, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ValidateActionPlanTasksTrackingWithHttpMessagesAsync(trackingValidation, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a collection of all goals
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='types'>
            /// The goal types(e.g Steps, CaloriesBurned) filter.
            /// </param>
            /// <param name='windowTypes'>
            /// The goal window types(e.g Daily, Weekly) filter.
            /// </param>
            /// <param name='startDate'>
            /// The start date for date range filter.
            /// </param>
            /// <param name='endDate'>
            /// The end date for date range filter.
            /// </param>
            public static GoalsResponse GetGoals(this IMicrosoftHealthVaultRestApi operations, string types = default(string), string windowTypes = default(string), System.DateTime? startDate = default(System.DateTime?), System.DateTime? endDate = default(System.DateTime?))
            {
                return operations.GetGoalsAsync(types, windowTypes, startDate, endDate).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a collection of all goals
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='types'>
            /// The goal types(e.g Steps, CaloriesBurned) filter.
            /// </param>
            /// <param name='windowTypes'>
            /// The goal window types(e.g Daily, Weekly) filter.
            /// </param>
            /// <param name='startDate'>
            /// The start date for date range filter.
            /// </param>
            /// <param name='endDate'>
            /// The end date for date range filter.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GoalsResponse> GetGoalsAsync(this IMicrosoftHealthVaultRestApi operations, string types = default(string), string windowTypes = default(string), System.DateTime? startDate = default(System.DateTime?), System.DateTime? endDate = default(System.DateTime?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetGoalsWithHttpMessagesAsync(types, windowTypes, startDate, endDate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update/Replace a complete goal instance with no merge
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='goal'>
            /// The instance of the goal to update. The entire goal will be replaced with
            /// this version.
            /// </param>
            public static Goal PutGoal(this IMicrosoftHealthVaultRestApi operations, Goal goal)
            {
                return operations.PutGoalAsync(goal).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update/Replace a complete goal instance with no merge
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='goal'>
            /// The instance of the goal to update. The entire goal will be replaced with
            /// this version.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Goal> PutGoalAsync(this IMicrosoftHealthVaultRestApi operations, Goal goal, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PutGoalWithHttpMessagesAsync(goal, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Post a collection of goal instances
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='goalsWrapper'>
            /// The collection of goal instances to create.
            /// </param>
            public static object CreateGoals(this IMicrosoftHealthVaultRestApi operations, GoalsWrapper goalsWrapper)
            {
                return operations.CreateGoalsAsync(goalsWrapper).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Post a collection of goal instances
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='goalsWrapper'>
            /// The collection of goal instances to create.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateGoalsAsync(this IMicrosoftHealthVaultRestApi operations, GoalsWrapper goalsWrapper, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateGoalsWithHttpMessagesAsync(goalsWrapper, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update collection of goal instances with merge
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='goalsWrapper'>
            /// The collection of goal instances to update. Only the fields present in the
            /// passed in model will be updated. All other fields and colelctions
            /// will be left, as is, unless invalid.
            /// </param>
            public static GoalsResponse PatchGoals(this IMicrosoftHealthVaultRestApi operations, GoalsWrapper goalsWrapper)
            {
                return operations.PatchGoalsAsync(goalsWrapper).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update collection of goal instances with merge
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='goalsWrapper'>
            /// The collection of goal instances to update. Only the fields present in the
            /// passed in model will be updated. All other fields and colelctions
            /// will be left, as is, unless invalid.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GoalsResponse> PatchGoalsAsync(this IMicrosoftHealthVaultRestApi operations, GoalsWrapper goalsWrapper, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchGoalsWithHttpMessagesAsync(goalsWrapper, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get an instance of a specific goal
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='goalId'>
            /// The goal identifier.
            /// </param>
            public static Goal GetGoalById(this IMicrosoftHealthVaultRestApi operations, string goalId)
            {
                return operations.GetGoalByIdAsync(goalId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get an instance of a specific goal
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='goalId'>
            /// The goal identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Goal> GetGoalByIdAsync(this IMicrosoftHealthVaultRestApi operations, string goalId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetGoalByIdWithHttpMessagesAsync(goalId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a goal instance
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='goalId'>
            /// The identifier of the goal to delete.
            /// </param>
            public static object DeleteGoal(this IMicrosoftHealthVaultRestApi operations, string goalId)
            {
                return operations.DeleteGoalAsync(goalId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a goal instance
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='goalId'>
            /// The identifier of the goal to delete.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteGoalAsync(this IMicrosoftHealthVaultRestApi operations, string goalId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteGoalWithHttpMessagesAsync(goalId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a collection of the active goals
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='types'>
            /// The goal types(e.g Steps, CaloriesBurned) filter.
            /// </param>
            /// <param name='windowTypes'>
            /// The goal window types(e.g Daily, Weekly) filter.
            /// </param>
            public static GoalsResponse GetActiveGoals(this IMicrosoftHealthVaultRestApi operations, string types = default(string), string windowTypes = default(string))
            {
                return operations.GetActiveGoalsAsync(types, windowTypes).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a collection of the active goals
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='types'>
            /// The goal types(e.g Steps, CaloriesBurned) filter.
            /// </param>
            /// <param name='windowTypes'>
            /// The goal window types(e.g Daily, Weekly) filter.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GoalsResponse> GetActiveGoalsAsync(this IMicrosoftHealthVaultRestApi operations, string types = default(string), string windowTypes = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetActiveGoalsWithHttpMessagesAsync(types, windowTypes, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Onboard a user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='onboardingRequest'>
            /// The meta data associated with an onboarding request
            /// </param>
            public static OnboardingResponse GenerateInviteCode(this IMicrosoftHealthVaultRestApi operations, OnboardingRequest onboardingRequest)
            {
                return operations.GenerateInviteCodeAsync(onboardingRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Onboard a user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='onboardingRequest'>
            /// The meta data associated with an onboarding request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OnboardingResponse> GenerateInviteCodeAsync(this IMicrosoftHealthVaultRestApi operations, OnboardingRequest onboardingRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GenerateInviteCodeWithHttpMessagesAsync(onboardingRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
